package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/davenicholson-xyz/rewind/app"
	"github.com/davenicholson-xyz/rewind/internal/database"
	"github.com/spf13/cobra"
)

// Message represents the IPC message structure
type Message struct {
	Action string `json:"action"`
	Path   string `json:"path"`
}

// Response represents the IPC response structure
type Response struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

// initCmd represents the init command
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new rewind project",
	Long: `Initialize a new rewind project in the specified directory (or current directory).
This creates a .rewind directory with necessary configuration files and database schema.
The project is automatically added to the daemon's watch list.

The initialization process:
- Creates .rewind directory structure
- Initializes SQLite database with version schema
- Creates default ignore patterns file
- Notifies the daemon to start monitoring

Examples:
  rewind init          # Initialize in current directory
  rewind init ./path   # Initialize in specified directory`,
	Run: func(cmd *cobra.Command, args []string) {

		app.Logger.Info("Starting new rewind app")

		targetDir, err := determineTargetDirectory(args)
		app.Logger.WithField("directory", targetDir).Debug("Target directory")
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			os.Exit(1)
		}

		if err := validateDirectory(targetDir); err != nil {
			fmt.Printf("Error: %v\n", err)
			os.Exit(1)
		}

		absTargetDir, err := filepath.Abs(targetDir)
		app.Logger.WithField("abs_directory", absTargetDir).Debug("Absolute target directory")
		if err != nil {
			fmt.Printf("Error getting absolute path: %v\n", err)
			os.Exit(1)
		}

		if err := checkExistingRewind(absTargetDir); err != nil {
			app.Logger.Error("Already inside rewind project")
			fmt.Printf("Error: %v\n", err)
			os.Exit(1)
		}

		if err := initializeRewindProject(absTargetDir); err != nil {
			fmt.Printf("Error: %v\n", err)
			os.Exit(1)
		}

		// Send IPC message after successful initialization
		if err := sendIPCMessage("add", absTargetDir); err != nil {
			app.Logger.WithField("error", err).Error("Failed to send IPC message")

			// Clean up the .rewind directory since daemon notification failed
			rewindDir := filepath.Join(absTargetDir, ".rewind")
			if cleanupErr := os.RemoveAll(rewindDir); cleanupErr != nil {
				app.Logger.WithField("cleanup_error", cleanupErr).Error("Failed to cleanup .rewind directory")
				fmt.Printf("Error: Failed to notify rewind daemon and failed to cleanup: %v (original error: %v)\n", cleanupErr, err)
			} else {
				app.Logger.Info("Cleaned up .rewind directory after IPC failure")
				fmt.Printf("Error: Failed to notify rewind daemon, cleaned up .rewind directory: %v\n", err)
			}
			os.Exit(1)
		} else {
			app.Logger.Info("Successfully notified rewind daemon")
		}

	},
}

func init() {
	rootCmd.AddCommand(initCmd)
}

func determineTargetDirectory(args []string) (string, error) {
	if len(args) == 0 || args[0] == "." {
		return os.Getwd()
	}
	return args[0], nil
}

func validateDirectory(dir string) error {
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		return fmt.Errorf("target directory does not exist: %s", dir)
	}
	return nil
}

func checkExistingRewind(absTargetDir string) error {
	rewindDir := filepath.Join(absTargetDir, ".rewind")
	if _, err := os.Stat(rewindDir); err == nil {
		return fmt.Errorf("rewind already initialized in this directory")
	}

	if hasRewindInParents(absTargetDir) {
		return fmt.Errorf("already inside a rewind project")
	}

	return nil
}

func hasRewindInParents(dir string) bool {
	currentDir := filepath.Dir(dir)

	for currentDir != filepath.Dir(currentDir) {
		rewindPath := filepath.Join(currentDir, ".rewind")
		if _, err := os.Stat(rewindPath); err == nil {
			return true
		}
		currentDir = filepath.Dir(currentDir)
	}

	return false
}

func initializeRewindProject(absTargetDir string) error {
	rewindDir := filepath.Join(absTargetDir, ".rewind")

	if err := createRewindDirectory(rewindDir); err != nil {
		return fmt.Errorf("unable to create .rewind directory: %w", err)
	}
	app.Logger.WithField("dir", rewindDir).Info("Created .rewind directory")

	dbm, err := database.NewDatabaseManager(absTargetDir)
	if err != nil {
		return fmt.Errorf("unable to create db manager: %w", err)
	}

	if err := dbm.InitDatabase(); err != nil {
		return fmt.Errorf("unable to initialize database: %w", err)
	}

	return nil
}

func createRewindDirectory(dir string) error {
	if err := os.Mkdir(dir, 0755); err != nil {
		return err
	}

	ignoreContent := `# Auto-generated by rewind
.git
.git/*
node_modules
node_modules/*
.DS_Store
*.tmp
*.log
*~
*.swp
*.swo
.*.swp
.*.swo
#*#
.#*
*.tmp
*.*~
.vscode/*
`

	ignoreFile := filepath.Join(dir, "ignore")
	return os.WriteFile(ignoreFile, []byte(ignoreContent), 0644)
}
